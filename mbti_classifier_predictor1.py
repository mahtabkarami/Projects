# -*- coding: utf-8 -*-
"""mbti_classifier_predictor1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tq-w3E6zEjF62oJ3IaUsMA68fOZenTth
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import ipywidgets as widgets
from IPython.display import display

# Set random seed for reproducibility
np.random.seed(42)

# Generate synthetic MBTI dataset
num_samples = 1000
user_ids = range(1, num_samples + 1)

# Sample personality types (16 types)
personality_types = ['INTJ', 'INTP', 'ENTJ', 'ENTP', 'INFJ', 'INFP', 'ENFJ', 'ENFP',
                     'ESTJ', 'ESTP', 'ISFJ', 'ISFP', 'ESFJ', 'ESFP', 'ISTJ', 'ISTP']

# Generate random personality types for users
mbti_types = np.random.choice(personality_types, size=num_samples)

# Generate random answers (0 or 1) for a set of questions (e.g., 10 questions)
num_questions = 10
answers = np.random.randint(2, size=(num_samples, num_questions))

# Create DataFrame
data = pd.DataFrame(answers, columns=[f'Answer_{i+1}' for i in range(num_questions)])
data['User ID'] = user_ids
data['Personality Type'] = mbti_types

# Reorder columns
data = data[['User ID', 'Personality Type'] + [f'Answer_{i+1}' for i in range(num_questions)]]

# Save the synthetic dataset to a CSV file
data.to_csv('synthetic_mbti_dataset.csv', index=False)
print("Synthetic MBTI dataset generated and saved as 'synthetic_mbti_dataset.csv'.")

# Load the dataset for modeling
df = pd.read_csv('synthetic_mbti_dataset.csv')

# Prepare features and labels
X = df.drop(columns=['User ID', 'Personality Type'])
y = df['Personality Type']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hyperparameter tuning using GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
}

model = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(model, param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Best model from grid search
best_model = grid_search.best_estimator_

# Make predictions using the best model
y_pred = best_model.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

# Create interactive widgets for user input with specific questions
questions = [
    "Do you prefer to plan things in advance rather than being spontaneous?",
    "Do you enjoy being the center of attention at social gatherings?",
    "Do you often think about the big picture rather than focusing on details?",
    "Do you prefer to work in a team rather than working alone?",
    "Do you find it easy to empathize with others' feelings?",
    "Do you enjoy trying new things and taking risks?",
    "Do you prefer to follow established rules rather than creating your own?",
    "Do you often rely on logic and analysis when making decisions?",
    "Do you prefer to have a few close friends rather than a wide circle of acquaintances?",
    "Do you feel drained after spending a lot of time in social situations?"
]

answer_widgets = [widgets.IntSlider(value=0, min=0, max=1, description=q) for q in questions]
submit_button = widgets.Button(description="Predict MBTI Type")

output = widgets.Output()

def on_button_click(b):
    with output:
        user_answers = np.array([widget.value for widget in answer_widgets]).reshape(1, -1)
        predicted_type = best_model.predict(user_answers)
        print(f'Predicted MBTI Type: {predicted_type[0]}')

submit_button.on_click(on_button_click)

# Display the questions and the submit button
display(widgets.VBox(answer_widgets))
display(submit_button)
display(output)